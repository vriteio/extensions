var z=Symbol("usableEnv"),c=Symbol("value"),l=Symbol("id"),y=Symbol("componentName"),i={data:{},func:{},views:{},currentScope:null},m={},g=()=>`_${Math.random().toString(36).substr(2,9)}`,s=new Proxy({},{get(t,e){let n=()=>{};return Object.defineProperty(n,y,{value:e}),n}});function C(t){if(!i.data.temp){let a=()=>i.data.temp[c];Object.defineProperty(a,l,{value:"temp"}),Object.defineProperty(a,c,{value:{},writable:!0}),i.data.temp=a}let e=g(),n=a=>{let d=i.data.temp;d[c][e]&&(d[c][e][c]=a)},o=()=>i.data.temp[c][e][c];return Object.defineProperty(o,l,{value:`temp.${e}`}),Object.defineProperty(o,c,{value:t,writable:!0}),i.data.temp[c][e]=o,i.currentScope&&i.currentScope.temp.push(e),[o,n]}var h=t=>{let e=g(),n=t;return Object.defineProperty(n,l,{value:e}),i.func[e]=n,i.currentScope&&i.currentScope.func.push(e),n},r=(t,e,...n)=>({component:t[y]||"Fragment",slot:n,props:Object.fromEntries(Object.keys(e||{}).map(o=>{let a=e[o];return a[l]?[o,a[l]]:[o,a]}))}),k=(...t)=>({component:"Fragment",slot:t,props:{}}),P=t=>{let e=g(),n={[l]:e,[c]:t};return i.views[e]=n,n},S=t=>{let e=m[t];e&&(e.func.forEach(n=>{delete i.func[n]}),e.temp.forEach(n=>{let o=i.data.temp;o()&&delete o()[n]}))},F=t=>({getEnvironment:()=>i,getMetadata:()=>({__value:c,__id:l,__componentName:y,__usableEnv:z}),generateRuntimeSpec:()=>({...t,onUninstall:t.onUninstall?.[l],onConfigure:t.onConfigure?.[l],configurationView:t.configurationView?.[l],contentPieceView:t.contentPieceView?.[l],blockActions:t.blockActions?.map(e=>({...e,view:e.view[l]}))}),generateView:(e,n)=>{let o=i.views[e]?.[c];if(o){i.currentScope={func:[],temp:[]};let a=o(n);return m[`view:${e}`]=i.currentScope,i.currentScope=null,a}},runFunction:(e,n)=>{let o=i.func[e];o&&(i.currentScope={func:[],temp:[]},o(n),m[`func:${e}`]=i.currentScope,i.currentScope=null,S(`func:${e}`))},removeScope:S});var T=F({onUninstall:h(async({client:t})=>{let e=await t.webhooks.list({extensionOnly:!0});e.length>0&&t.webhooks.delete({id:e[0].id})}),onConfigure:h(async({client:t,config:e,spec:n})=>{let o=await t.webhooks.list({extensionOnly:!0}),a=e?.autoPublish&&e?.contentGroupId&&e?.apiKey;o.length>0?a?await t.webhooks.update({id:o[0].id,url:"https://extensions.vrite.io/dev/webhook",metadata:{contentGroupId:`${e.contentGroupId}`}}):await t.webhooks.delete({id:o[0].id}):a&&await t.webhooks.create({name:n.displayName,event:"contentPieceAdded",metadata:{contentGroupId:`${e.contentGroupId}`},url:"https://extensions.vrite.io/dev/webhook"})}),configurationView:P(({use:t})=>{let[e]=t("config.apiKey"),[n]=t("config.organizationId"),[o,a]=t("config.autoPublish"),[d,u]=t("config.contentGroupId"),[f]=t("config.requireCanonicalLink"),[b]=t("config.draft");return typeof o()!="boolean"&&a(!0),d()||u(""),r(k,null,r(s.Field,{type:"text",color:"contrast",label:"API key",placeholder:"API key","bind:value":e},"Your Dev.to API key. You can generate one in the [settings page](https://dev.to/settings/extensions), under **DEV Community API Keys** section"),r(s.Field,{type:"text",color:"contrast",label:"Organization ID",optional:!0,"bind:value":n},"ID of the Dev.to organization you are in and want to publish your posts to. You can find the organization ID in the URL of the your [Dev.to Dashboard](https://dev.to/dashboard), when **filtering posts by organization**"),r(s.Show,{"bind:when":o},r(s.Field,{type:"text",color:"contrast",label:"Content group","bind:value":d},"Provide ID of a content group to auto-publish from, when content pieces are moved to it. You can copy the ID from the dashboard."),r(s.Field,{type:"checkbox",color:"contrast",label:"Require canonical link","bind:value":f},"Don't auto-publish when no canonical link is set")),r(s.Field,{type:"checkbox",color:"contrast",label:"Auto-publish","bind:value":o},"Publish posts automatically"),r(s.Field,{type:"checkbox",color:"contrast",label:"Draft","bind:value":b},"whether the Dev.to article should be in draft (private) by default"))}),contentPieceView:P(({config:t,token:e,extensionId:n,notify:o,use:a,flush:d})=>{let u=!t?.apiKey||t.autoPublish&&!t.contentGroupId,f=a("contentPiece"),[b]=a("data.devSeries"),[x,D]=a("data.autoPublish"),[$,V]=a("data.devId"),[I,A]=a("data.draft"),[O,v]=C(!1),[j,G]=C(b()?"Update":"Publish"),_=h(async()=>{try{v(!0);let w=await fetch("https://extensions.vrite.io/dev",{method:"POST",headers:{Authorization:`Bearer ${e}`,"X-Vrite-Extension-Id":n,"Content-Type":"application/json"},body:JSON.stringify({contentPieceId:f().id})}),p=await w.json();if(!w.ok||!p.devId)throw new Error("Couldn't publish to Dev.to");p.devId?o({text:"Updated on Dev.to",type:"success"}):o({text:"Published to Dev.to",type:"success"}),p.devId&&p.devId!==p.devId&&V(p.devId),v(!1),G("Update"),d()}catch{o({text:"Couldn't publish to Dev.to",type:"error"}),v(!1),d()}});return typeof I()!="boolean"&&A(t?.draft||!1),typeof x()!="boolean"&&D(!0),r(s.View,{class:"flex flex-col gap-2"},r(s.Field,{type:"text",color:"contrast",label:"Series name","bind:value":b,disabled:u},"The exact name of the series to which this post should be added"),r(s.Field,{type:"checkbox",color:"contrast",label:"Draft","bind:value":I,disabled:u},"whether the Dev.to article should be in draft (private)"),r(s.Show,{when:t?.autoPublish},r(s.Field,{type:"checkbox",color:"contrast",label:"Auto-publish","bind:value":x,disabled:u},"whether the article should be auto-published")),r(s.Button,{color:"primary",class:"w-full flex justify-center items-center m-0",disabled:u,"bind:loading":O,"on:click":_},r(s.Text,{"bind:content":j})))})});export{T as default};
